CSS - Cascading Style Sheets
CSS - cant do anything on its own, its purpose is to style an Markup language

Content:
+ 1. CSS FlexBox
+ 2. CSS Grid
+ Selectors
+ "@media" queries


For exercise: 
https://www.frontendmentor.io/challenges/four-card-feature-section-weK1eFYK

CSS code can be added through "style" attribute in HTML elements or as <style> </style> HTML element
Every CSS line ends with ;

For beautiful colour combinations on websites: "colorhunt.co"

CSS Syntax: https://prnt.sc/r7xfw8

Box Model:
+ Every HTML element is represented as a "box model" in the browser. It has its own elements that are mostly set by the default values of the browser.
+ Those elements can be seen here: https://prnt.sc/ratq77
+ Every box has its border, the line that is setting the outline of the box.
+ Padding the internal space of the box element.
+ Margin the outer space of the box element.

Anatomy of CSS:
body {
	background-color: red;
} 
Element that will be modified by CSS then curly brackets, inside of curly brackets you write the css code, every line ends with ;

++Very Important Attribute that is added to elements to group them together for more precise CSS implementation is "CLASS":
+ It is added as the Attribute to the HTML element in the opening tag --> class=""
+ You can have more than one class per HTML element and class names can be used on more than one HTML element
+ Multiple class names example: <p class="ovojeprvaklasa ovojedrugaklasa">
+ Class is accessed in CSS by .nameoftheclass{}

++Very Important Attribute that is added to elements for identifying them is called "id":
+ It is added as the Attribute to the HTML element in the opening tag --> id=""
+ You can only have one class per HTML element and that id name can not be used anywhere else
+ ID is accessed in CSS by #nameoftheid{}

Pseudo classes --> :hover -->(Research this more)<--

CSS elements:
/* */ --> commenting
+ background-color: name of color; --> changes the color of the HTML element
(The background of an element is the total size of the element, including padding and border (but not the margin).)
+ border-style: value; --> changes the style of border of specific element, every HTML element is essentially a box, with this CSS code you are changing
the style of that box. There are different values that can be set to this element.
+ border-radius
+ height: 2px; --> height of the box of the element set to 2 pixels, for an example adding 10 pixels to <hr> increases its size to 10 pixels, same as setting the 
size="10" = height: 10;
+ width: 20px --> width of the box of the element set to 20 pixels.
+ border-width: --> specifies the width of the line that is border itself
+ border-color: --> sets the color of the border

+ color: --> changing the color of a text
+ font-size: --> size of the words
+ font-weight --> changes the line of letters - bold 
+ font-family: --> changes the style of text  --------------- W3SCHOOLS - CSS web safe fonts ----- CSS font stack shows the percentage of users that have
that font so its safe to use it.
++ GOOGLE FONTS ++ -- website from where you can pick fonts and embed them to your website so you are 100% sure that everyone will see your font
as you made it.
+ text-align: centre --> centres the text
+ line-height: 2;

+padding
+margin - auto to center it from all sides, basically centers the elemnt in the page
+Display: Block or Inline or Inline-Block or None; --> how an element is displayed, block means that an element has the width of the page while inline
means that elements box is around him, inline-block is best of both worlds - elements can be in a same line and you can affect the width of them.
+position: static, relative  --> static position of an HTML element is a default value which means that the HTML element will be shown on the website
in the same order the code was written, relative changes the position of an HTML element by creating the ability of an element to move freely
on the website by changing the properties (top, bottom, left, right) - 49. CSS Static and Relative Positioning
+position: absolute --> similar to relative, but it influences the position of HTML elements it does not leave a "ghost" of element where it was
50. Absolute positioning
+ position: fixed
+ float: left; HTML element floats to the left, text will wrap around image
+ clear: left; anti float

++++++++++++FlexBox++++++++++++
1. CSS FlexBox:
---------------

Flex-Box Froggy - Great Game that helps you work on your flex-box skills.

https://css-tricks.com/snippets/css/a-guide-to-flexbox/

Anatomy of FlexBox - https://prnt.sc/v307n2
-Main Axis can be horizontal or vertical, it depends how is the flex-direction set.


AMAZING VIDEO ON FLEXBOX AND USES:
- https://www.youtube.com/watch?v=vQAvjof1oe4

+Properties of the "flex container" the parent object:
------------------------------------------------------

1. display: flex - defines the parent property to be a flex container

2. flex-direction: row | row-reverse | column | column-reverse - specifies the direction of the flex items inside of the 
flex container, to be more precise it specifies the direction of the main axis which basically is the same as saying that 
it defines the direction of items.

3. flex-wrap: nowrap | wrap | wrap-reverse -By default, flex items will all try to fit onto one line. That is the default 
value which is equal to setting the "flex-wrap" property to "nowrap". If the property is set to "wrap" the flex items will
be wrapped together and that will allow them to move to multiple rows while still maintaining together. "wrap-reverse" is
the same as "wrap" just the multiple rows or columns created will be in reverse order. -Examples: https://css-tricks.com/almanac/properties/f/flex-wrap/

4. flex-flow: - it is basically a shortcut when defining "flex-direction" and "flex-wrap".

5. justify-content: flex-start | flex-end | centre | space-between | space-around | space-evenly - This property basically
defines the position of items in the container relative to one another. How the items are aligned along the main axis.

6. align-items: flex-start | flex-end | centre | stretch | baseline - this property is focused on positioning items in the 
container based on the cross axis of the container. 

7. align-content: flex-start | flex-end | centre | stretch | space-between | space-around - When there are multiple lines
of items in the container this property is used to move it around the container. It is similar to "justify-content" and to
"align-items" just in this case we are working with multiple line and moving them through the cross-axis.

+Properties of the "flex item" the child object:
------------------------------------------------

1. order: *integer value* - order property tells the engine in what order do we want to show the flex items in the flex
container. If the order property is not set, then the items will be shown in the default order ( meaning the way they were
coded, hierarchically).

2. flex-grow: *integer value* - it sets the ability of flex item to grow in the remaining space of the flex container. If
the remaining space in the flex container is 27px and we set the first flex item's flex-grow to 1 and second flex item's
flex-grow to 2 it will divide the remaining space in flex container of 27 into 3 parts. One part going to the first item
and the remaining 2 parts going to the second item.
Negative numbers are invalid and the default value is 0.
- Detailed explanation of "flex-grow" - https://css-tricks.com/flex-grow-is-weird/

3. flex-shrink

4. flex-basis: - It defines the default size of the flex items. 

5. align-self: - is the same as align-items but it is focused on a single item in the container. It has the same values as
align-items.
-Example: https://prnt.sc/whn66q

++++++++++++CSS-Grid++++++++++++
2. CSS Grid
-----------


- Documentation: https://learncssgrid.com/

+ Grid Container:
-----------------

+ display: grid;
- Create a grid container by setting the "display" property with a value of "grid" or "inline-grid".
All direct children of grid containers become grid items.
- Creating the grid layout makes Grid Items in a row layout, one under another, which means that each item
is a row by itself, the width of each item is equal to the width of the parent element, height is equal
to the height of the parent element divided by the number of elements.

+ "Grid items are placed in rows by default and span the full width of the grid container."

+ display: inline-grid;
- We are also able to set the value of display to "inline-grid" and still implement the grid layout but 

+ Explicit Grid:
----------------

- This attribute is set on the container (parent) element of grid layout.
- We are able to create a grid rows or columns and explicitly specify the height (if it is a row) or the 
width (if it is a column).
- We do this by using: "grid-template-rows:" and "grid-template-columns:"

+ grid-template-rows:

- "grid-template-rows:" sets the behaviour of the grid layout to rows every individual item is a new row,
values that we pass to this attribute define the height of each item individually.
- We are able to pass multiple numbers to this CSS Attribute, these values from left to right influence items
from the first item of grid created to the last.
- We can also have less values then the items in the grid, this will result in the changes made only to
items that had the value passed, while the rest will just have the height of their content.
- Example: https://prnt.sc/11sscbk

+ grid-template-columns:

- "grid-template-column:" sets the behaviour of the grid layout to columns, values that we pass to this 
attribute define the width of each column individually.
- That is why when we set the values to the "grid-template-columns:" the number of values will define the
number of columns we have.
- For an example, we set 3 numbers as values in the "grid-template-columns:" this means that only three
columns will be defined and their width will be those numbers, if the number of items is greater then the
number of columns it just means that items will be sorted into those 3 columns, first three items will be 
in column 1, column 2 and column 3 respectfully, item 4 will go into column 1, item 5 will go into column 2
and so on.
- Example: https://prnt.sc/11ssni7

+ IMPORTANT TO UDNERSTAND:
- These two attributes are used to define the height or width of the columns and rows.

+ "fr" value:
-------------
- these two "grid..." attributes are able to accept any non negative value as the value by witch the 
height and width will be defined.
- One of these values that are accepted is the "fr" type value.
- The "fr" unit helps create flexible grid tracks. It represents a fraction of the available space in 
the grid container.

- The most simple example is all items using the "fr" value ( these units can be combined with other units,
one item is using pixels, other item is using em and the last one is using fr, anything can be used ),
imagine we have 6 items in our grid layout, we set that every item has a width (column) of 1 fr, this means
that the width of every item will be 1 / 6 of the width.
- In the example above, if one item has the 2 fr value, he will be double the size in width of other items,
but what is the 1fr in this case it is not 1/6 because we divide the page into the total amount of "fr"
units we have in this case "7", and then say that all items are 1/7 except one that is 2/7.
- "fr" value is great when we are working with changing values, because it is a dynamic value that we set 
and not a static such as the strict number of pixel width or height.

+ Minimum and Maximum Size:
---------------------------

- Example: https://prnt.sc/11stru7
- Tracks sizes can be defined to have a minimum and/or maximum size with the minmax() function.
- The minmax() function accepts 2 arguments: the first is the minimum size of the track and the 
second the maximum size. Alongside length values, the values can also be auto, which allows the 
track to grow/stretch based on the size of the content.

+ Repeating Grid Tracks:
------------------------

- Example: https://prnt.sc/11stt7o
- repeat() is a function that we can set as the value of "grid-template-columns" or "grid-template-rows"
to which we pass two arguments.
- the first argument is a simple number, that defines how many times will the value repeat itself, if we 
use it in the "grid-template-columns" and say the first argument of "repeat()" function is 4 we are saying
that 4 columns will be created with the value of the second argument.
- the second argument is just the height or width that we pass and that will be repeated the x number of
times. 

- "grid-template-columns: repeat(4, 100px) ====> grid-template-columns: 100px 100px 100px 100px;"

- repeat() function can be used in combination with other values, for an example we define the width of the
first column as 100px to the 2nd 3rd and 4th column we say "repeat(3, 200px)" and the 5th column is 300px
- "grid-template-column: 100px repeat(3, 200px) 300px;" ----> this is 100% valid.

+ Grid Gaps (Gutters):
----------------------

- "grid-column-gap" and "grid-row-gap" attributes create spaces (gutters) between the columns and rows 
respectfully.
- These gaps are only created between the rows and columns and not between the grid items and the grid container.
- Example: https://prnt.sc/11su7mw

- We are also able to just say "grid-gap" and pass two or one number.
- if two values are set, the first value will specify the "grid-row-gap" and the second is "grid-column-gap"
- If one value is set, then it will set the gap on both attributes.

+ Aligning Grid Items (Box Alignment):
--------------------------------------

+ justify-items and justify-self - align the items across the row axis

+ align-items and align-self - align the items across the column axis

- justify-content and align-items are applied to the container element (the parent element) and can have
the following values set: 
- auto
- normal
- start
- end
- centre
- stretch
- baseline
- first baseline
- last baseline


++++++++++++@media Queries++++++++++++

"@media" queries:
-----------------

- media queries are used to create a responsive web sites.
- In today's day and age, it is very important to have responsive design, your webpage will most likely be
opened on a desktop monitor but also on many different devices, such as mobile phones and tablets.

+ Syntax:
---------
- Syntax: https://prnt.sc/12rdgfi

- To implement a media query is very simple.
- It is a part of CSS so we do not have to import any libraries or do any changes to the normal CSS that we
use.
- We just simply begin by saying: "@media", the "@" sign is important.

- @media MediaType and (MediaFeature)

- MediaType is used to select the type of the Media for which we are making these changes.
- Different types of Media are: screen, print, speech and all.
- Example: https://prnt.sc/12rcv10

- To MediaType almost always we will add the MeadiaFeature.
- We do this by simply adding "and" keyword, which defines that MediaFeatures will be added.

- MediaFeatures are always written inside the brackets "()".
- With MediaFeatures we specify the conditions that have to be true for the CSS code inside the body of 
@media query be applied to the HTML.

- Example: @media all and (max-width: 500px){
				body:{
					color: blue;
				}
			}
- If the width is greater then the maximum width that is set then this media query will not be applied.

- We are able to add multiple MediaFeatures and we do that by using keywords, the first and the most common
one is "and" we use it to add more MediaFeatures (Conditions) that we need to fulfil for our @media query
to be applied.
- Second keyword is "or", where one of the MediaFeature have to be fulfilled for @media query to be applied.
- Third is "not", just specifies that the next MediaFeature has to be false.


+++ VERY IMPORTANT +++
- All media query code has to be at the end of the CSS, because only then the CSS will overwrite the previous
CSS code when the conditions of media query are fulfilled.
- Because, as we know, the document is read from top to bottom.












+ Selectors +
-------------
- https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048

+ Basic Selectors:
------------------
1. * - used to select every single element, it is not recommended for use, because it can slow down the 
effectiveness.
2. #X - selection by id.
3. .X - selection by class.
4. X - type selector, selecting all HTML elements of a certain type ( for an example, all "img" tags )

+ Combinator Selectors:
-----------------------
- https://www.w3schools.com/css/tryit.asp?filename=trycss_sel_element_tilde

5. X Y - descendant selector, X is ul Y is a, rather than targeting all anchor tags, you only need to target 
the anchors which are within an unordered list
6. X + Y - Adjacent Sibling Selector, selects the element that is the sibling of the X element, example, 
div + p --> will select the paragraph that is the first element outside the div element.
7. X > Y - The child selector selects all elements that are the direct children of a specified element. All
Y that are direct children of X. We are also able to specify this even further and say --> #container > ul
8. X ~ Y - General Sibling Selector, selects all siblings of X that are Y, not only the next sibling ( like
the X + Y does )

+ Attribute Selectors:
----------------------

9. X[title] - attributes selector, will select all X html tags that have "title" attribute specified.
10. X[href="foo"] - we are also able to specify the value of attribute that we are looking for on the X element,
this will result in change to elements that are of type X with attribute "href" and value of that attribute
being "foo".
11. X[href*="foo"] - using the "*=" sign we create a more general value of href, the 10th selector would
only return elements whose "href" value is "foo" and nothing more or less, with the 11th selector we return
all elements whose "href" value at any point has "foo" inside of it.
